---
import testimonialsData from "./testimonials.json";

interface Testimonial {
  name: string;
  role: string;
  avatar?: string;
  video?: string;
  poster?: string;
  quote?: string;
}

const testimonials: Testimonial[] = testimonialsData.testimonials;

const testimonialsVideos = testimonials.filter(
  testimonial => testimonial.video
);
const testimonialsQuotes = testimonials.filter(
  testimonial => !testimonial.video
);
---

<section class="py-16">
  <div class="main mx-auto px-4">
    <h2 class="mb-12 text-3xl font-bold">Testimonials</h2>
    <div
      class="flex flex-row gap-8 overflow-x-auto pb-4 [-ms-overflow-style:none] [scrollbar-width:none] [&::-webkit-scrollbar]:hidden"
    >
      {
        testimonialsVideos.map((testimonial, index) => (
          <div class="min-w-[300px] overflow-hidden rounded-lg bg-white shadow-md">
            {testimonial.video && (
              <div class="relative" data-video={`${index}`}>
                <video
                  class="aspect-[9/16] w-full bg-black/50 object-cover"
                  id={`video-${index}`}
                  playsinline
                  preload="none"
                >
                  <source src={testimonial.video} type="video/mp4" />
                  <video />
                </video>
                <div
                  class="overlay absolute inset-0 flex cursor-pointer items-center justify-center"
                  id={`overlay-${index}`}
                >
                  <img
                    src={testimonial.poster}
                    alt={testimonial.name}
                    class="absolute inset-0 w-full"
                    loading="lazy"
                  />
                  <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 transition-opacity duration-300">
                    <button
                      class="z-10 text-4xl text-white"
                      aria-label="Play video"
                    >
                      â–¶
                    </button>
                  </div>
                </div>
                <div class="absolute bottom-4 left-0 min-w-[200px] rounded-r-lg bg-white/90 p-2">
                  <p class="font-bold">{testimonial.name}</p>
                  <p class="text-sm text-gray-600">{testimonial.role}</p>
                </div>
              </div>
            )}
          </div>
        ))
      }
    </div>
    <div class="grid grid-cols-1 gap-8 pt-8 md:grid-cols-3">
      {
        testimonialsQuotes.map(testimonial => (
          <div class="flex flex-col overflow-hidden rounded-lg border border-gray-200 bg-white shadow-sm">
            <div class="flex h-full flex-col justify-between p-6">
              {testimonial.quote && (
                <p class="mb-4 text-sm">{testimonial.quote}</p>
              )}
              <div class="flex items-center">
                <img
                  src={testimonial.avatar}
                  alt={testimonial.name}
                  width={40}
                  height={40}
                  class="mr-3 h-10 w-10 rounded-full"
                />
                <div>
                  <p class="font-bold">{testimonial.name}</p>
                  <p class="text-sm text-gray-600">{testimonial.role}</p>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  const videos = document.querySelectorAll(
    "[data-video]"
  ) as NodeListOf<HTMLElement>;

  videos.forEach(video => {
    video.addEventListener("click", () => {
      toggleVideo(video.dataset.video ?? "");
    });
  });

  function toggleVideo(name: string) {
    const currentVideo = document.getElementById(
      `video-${name}`
    ) as HTMLVideoElement;
    const currentOverlay = document.getElementById(
      `overlay-${name}`
    ) as HTMLElement;

    // Pause all other videos
    videos.forEach(video => {
      const videoElement = document.getElementById(
        `video-${video.dataset.video}`
      ) as HTMLVideoElement;
      const overlayElement = document.getElementById(
        `overlay-${video.dataset.video}`
      ) as HTMLElement;
      if (videoElement && videoElement !== currentVideo) {
        videoElement.pause();
        overlayElement.style.opacity = "1";
        overlayElement.style.display = "flex";
      }
    });

    // Toggle the current video
    if (currentVideo && currentVideo.paused) {
      currentVideo.play();
      currentOverlay.style.opacity = "0";
      setTimeout(() => (currentOverlay.style.display = "none"), 300);
    } else {
      currentVideo.pause();
      currentOverlay.style.opacity = "1";
      currentOverlay.style.display = "flex";
    }
  }
</script>
